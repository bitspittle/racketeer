title: Do Crimes
icons:
  cash: "💰"
  expendable: "🔥"
  flavor: "📜"
  influence: "🤝"
  luck: "🎲"
  suspicious: "🚩"
  swift: "🏃"
  veteran: "🚨"
  vp: "🌟"

features:
  - id: buildings
    name: Blueprints & Buildings
    description: |
      Extend the base game with buildings.

      Construct useful support structures and discover new strategies for dominating the street.
unlocks:

  - id: feedback
    name: Feedback Access
    description: Send us feedback using our form. We're listening to you!
    codename: heylisten
    vp: 1

  - id: buildings
    name: $feature
    description: You can choose the "$feature" game mode the next time you select "New Game".
    codename: realestate
    vp: 40

  - id: discord
    name: Discord Access
    description: Join the community! Share stories of your triumphs, trials, and tribulations.
    codename: speakeasy
    vp: 100

numTurns: 20
initialHandSize: 5
initialCash: 0
initialInfluence: 0
initialLuck: 0

cardTypes:
  # Ordered by how they should show up on a card, NOT alphabetically necessarily
  - Action
  - Treasure
  - Cop
  - Thief
  - Spy
  - Trickster
  - Legend

traitNames:
  expendable: Expendable
  suspicious: Suspicious
  swift: Swift

upgradeNames:
  cash: Dextrous
  influence: Artful
  luck: Lucky
  veteran: Veteran

rarities:
  - name: Common
    blueprintFrequency: 3
    shopFrequency: 4
    shopCount: 12
  - name: Uncommon
    blueprintFrequency: 2
    shopFrequency: 2
    shopCount: 10
  - name: Rare
    blueprintFrequency: 1
    shopFrequency: 1
    shopCount: 8

tierFrequencies:
  - 5
  - 6
  - 7
  - 8
  - 9

shopSizes:
  - 3
  - 4
  - 5
  - 6
  - 7

shopPrices:
  - 4
  - 8
  - 12
  - 16

rankings:
      - name: "D   Pickpocket"
        score: 0
      - name: "D+  Newsie"
        score: 10
      - name: "C-  Embezzler"
        score: 20
      - name: "C   Burglar"
        score: 30
      - name: "C+  Croupier"
        score: 40
      - name: "B-  Smuggler"
        score: 50
      - name: "B   Squealer"
        score: 60
      - name: "B+  Swindler"
        score: 70
      - name: "A-  Fence"
        score: 85
      - name: "A   Safecracker"
        score: 100
      - name: "A+  Purse Snatcher"
        score: 120
      - name: "S-  Bank Robber"
        score: 150
      - name: "S   Kingpin"
        score: 180
      - name: "S+  Annie Doshen"
        score: 250

globalActions:
  # yaml freaks out a bit about some characters (e.g. | or >, which it tries to interpret), so define non-symbol
  # versions of everything in case that helps avoid those cases without needing to wrap things in quotes
  - "alias 'and? '&&"
  - "alias 'or? '||"
  - "alias 'eq? '="
  - "alias 'ne? '!="
  - "alias 'lt? '<"
  - "alias 'lte? '<="
  - "alias 'gt? '>"
  - "alias 'gte? '>="
  - def 'set! --inline _ '$name '$value '(set --overwrite _ $name $value)
  - def 'game-add! '$property '$amount '(game-set! $property '(+ $it $amount))
  - def 'game-sub! '$property '$amount '(game-set! $property '(- $it $amount))
  - def 'card-add! '$card '$property '$amount '(card-set! $card $property '(+ $it $amount))
  - def 'card-sub! '$card '$property '$amount '(card-set! $card $property '(- $it $amount))
  - def 'building-add! '$bldg '$property '$amount '(building-set! $bldg $property '(+ $it $amount))
  - def 'building-sub! '$bldg '$property '$amount '(building-set! $bldg $property '(- $it $amount))
  - def 'if-true '$cond '$expr '(if $cond $expr _)
  - def 'if-false '$cond '$expr '(if $cond _ $expr)
  - def 'stop-if! '$cond '(if $cond '(stop!) _)
  - def 'cancel-if! '$cond '(if $cond '(cancel!) _)
  - def 'concat-to-string '$strs '(join-to-string --separator "" $strs)
  - def 'ask? '$prompt '(= (single (choose --prompt icon-convert $prompt (list "Yes" "No") 1)) "Yes")
  - def 'ask?! '$prompt '(= (single (choose --required _ --prompt icon-convert $prompt (list "Yes" "No") 1)) "Yes")
  - def 'card-has-any-of-types? '$card '$types '(any? (card-get $card 'types) '(in? $types $it))
  - def 'card-has-all-types? '$card '$types '(all? (card-get $card 'types) '(in? $types $it))
  - def 'card-upgrade-count '$card '(size card-upgrades $card)
  - def 'card-has-any-upgrade? '$card '(gt? (card-upgrade-count $card) 0)
  - def 'card-named '$name '(single --matching '(= card-get $it 'name $name) $card-list)
  - def 'card-with-id '$id '(single --matching '(= card-get $it 'id $id) $all-cards)
  - def 'building-with-id '$id '(single --matching '(= building-get $it 'id $id) $buildings)
  - def 'compare-by-index '$list '$a '$b '(compare index-of $list $a index-of $list $b)
  - def 'pile-compare '$pileA '$pileB '(compare-by-index (list $hand $deck $discard $street $jail) $pileA $pileB)
  - def --inline _ '_choose-across-piles '$required '$prompt '$cards '$count '(run '(stop-if! empty? $cards) '(choose --required $required --format $fmt-card-with-pile --prompt $prompt (sorted --with '(pile-compare card-pile $a card-pile $b) (sorted $cards)) $count))
  - def 'choose-across-piles '$prompt '$cards '$count '(_choose-across-piles false $prompt $cards $count)
  - def 'choose-across-piles! '$prompt '$cards '$count '(_choose-across-piles true $prompt $cards $count)
  - set '$fmt-card-with-pile '(concat-to-string (list ";(" (pile-get (card-pile $it) 'name) ")"))
  - set '$fmt-card-with-cost '(concat-to-string (list ";(" (card-get $it 'cost) (icon-convert "$") ")"))
  - set '$fmt-blueprint-with-cost '(icon-convert --expand false (concat-to-string (list (blueprint-get $it 'name) ";(" (blueprint-get $it 'build-cost-cash) "$ " (blueprint-get $it 'build-cost-influence) "&)")))
  - def 'buyable-card-list '(filter $card-list '(! (= 0 (card-get $it 'cost))))
  - def 'cards-instantiate '$cards '(map $cards '(card-instantiate $it))
  - def 'card-make-expendable! '$card '(run '(card-remove-trait! $card 'suspicious) '(card-add-trait! $card 'expendable))
  # Define keys used for game-data-set!
#  - set '$key-nft-price "nftprice"

initActions:
  - set '$pickpocket (card-named "Pickpocket")
  - set '$newsie (card-named "Newsie")
  - pile-copy-to! --pos 'random $deck (union repeat $pickpocket 5 repeat $newsie 3)
  - |
    if-true (game-has-feature? 'buildings)
      '(run
         '(set '$initial-blueprints choose --prompt "Pick starting blueprints." --required _ (random-blueprints 4) 3)
         '(for-each $initial-blueprints '(blueprint-own! $it))
      )

cards:
  # TIER 1

  - name: Constable
    tier: 0
    types: [cop]
    description:
      ability: Do nothing.
      flavor: "He ain't got a lot of spare time for protecting or serving."

#  This card is only created as an example to show off the game-data- methods, and it is expected to be deleted /
#  moved / significantly altered.
#
#  - name: Bad Ape Painting
#    tier: 0
#    cost: 1
#    types: [treasure]
#    description:
#      ability: This card's VP randomly fluctuates wildly.
#      flavor: A mediocre piece of digital art, but you think you might find a greater fool who will buy it from you later for more.
#    passiveVp: game-data-get --default 0 $key-nft-price
#    initActions:
#      - |
#        if-false (game-data-is-set? $key-nft-price) '(run
#          '(game-data-set! $key-nft-price random .. 0 20)
#          '(fx-add! --desc "At end of turn, the NFT market is updated." --lifetime 'game --event 'turn-end '(game-data-set! $key-nft-price random .. 0 20))
#        )

  - name: Newsie
    tier: 0
    types: [spy]
    description:
      ability: Gain &.
      flavor: "'Extra! Extra! Read all about it!'"
    playActions:
      - game-add! 'influence 1

  - name: Pickpocket
    tier: 0
    types: [thief]
    description:
      ability: Gain $.
      flavor: "'Oi, did I bump into you? Sorry, guvnah!'"
    playActions:
      - game-add! 'cash 1

  - name: Agent Magpie
    features: [buildings]
    tier: 0
    types: [thief, spy, trickster, cop, legend]
    description:
      ability: Gain $, &, and %. Then this gains either +$, +&, +%, or "Draw a card, then discard a card", in that order.
      flavor: There's nothing more dangerous than a fed who learns from their mistakes.
    playActions:
      - game-add! 'cash 1
      - game-add! 'influence 1
      - game-add! 'luck 1
      - |
        if (! card-has-upgrade? $this 'cash) '(card-upgrade! $this 'cash)
        '( if (! card-has-upgrade? $this 'influence) '(card-upgrade! $this 'influence)
        '( if (! card-has-upgrade? $this 'luck) '(card-upgrade! $this 'luck)
        '( (card-upgrade! $this 'veteran) )))

  - name: Counterfeit Cash
    tier: 0
    rarity: 1
    types: [action]
    cost: 2
    traits: [suspicious]
    description:
      ability: Gain 4$.
      flavor: "Better spend these bills somewhere dark; they say 'In God We Crust'."
    playActions:
      - game-add! 'cash 4

  - name: Embezzler
    tier: 0
    rarity: 1
    types: [thief, spy]
    cost: 2
    description:
      ability: Gain $ and &.
      flavor: She enjoys embezzling mostly because the word 'embezzlement' is fun to say.
    playActions:
      - game-add! 'cash 1
      - game-add! 'influence 1

  - name: Con Artist
    tier: 0
    rarity: 1
    types: [thief, trickster]
    cost: 2
    description:
      ability: Gain $ and %.
      flavor: "'Although I was born a Prince in Nigeria, in this country, I am but the humble owner of the Brooklyn Bridge.'"
    playActions:
      - game-add! 'cash 1
      - game-add! 'luck 1


  - name: Vintage Brooch
    tier: 0
    rarity: 1
    types: [treasure]
    cost: 2
    description:
      ability: Draw a card.
      flavor: Like the grandma you inherited it from, it's ancient but classy.
    vp: 2
    playActions:
      - game-draw! 1

  - name: Cheese It!
    tier: 0
    rarity: 1
    types: [action]
    cost: 2
    traits: [swift, suspicious]
    description:
      ability: "Jail two non-Cop cards you own."
      flavor: "'Split up! They can't catch us both!'"
    playActions:
      - set '$ownednoncops filter $owned-cards '(! (card-has-type? $it 'cop))
      - pile-move-to! $jail choose-across-piles "Jail cards." $ownednoncops (min 2 size $ownednoncops)


  - name: Burglar
    tier: 0
    rarity: 0
    types: [thief]
    cost: 2
    description:
      ability: Gain 2$.
      flavor: People always complain about highway robbery, so he sticks to houses.
    playActions:
      - game-add! 'cash 2

  - name: Rumormonger
    tier: 0
    rarity: 1
    types: [spy]
    cost: 2
    description:
      ability: Gain 2&.
      flavor: "'This stays between us, but...'"
    playActions:
      - game-add! 'influence 2

  - name: Graffiti Artist
    tier: 0
    rarity: 1
    types: [trickster]
    cost: 3
    description:
      ability: Jail a card on the Street. Replace it with a random card of the same tier.
      flavor: "'Yes, it's art. No, I don't care if you can read the font.'"
    playActions:
      - set '$cardtoreplace (single (choose --prompt "Choose a card to jail." $street 1))
      - set '$newtier (card-get $cardtoreplace 'tier)
      - pile-move-to! $jail $cardtoreplace
      - set '$all-tier-cards (filter buyable-card-list '(= $newtier (card-get $it 'tier)))
      # We don't want to jail a card to simply replace it with itself, that doesn't feel fun
      - set '$most-tier-cards (filter $all-tier-cards '(! (= (card-get $cardtoreplace 'name) (card-get $it 'name))))
      # Graffiti Artists creating more Graffiti Artists is generally not fun
      # Instantiate cards so we can show up-to-date VP calculations
      - set '$some-tier-cards cards-instantiate (filter $most-tier-cards '(! (= (card-get $this 'name) (card-get $it 'name))))
      # Force a choose screen so that the player can see what card they got
      - |
        run-later '(run
          '(set '$random-tier-card (choose --prompt "Your new card is:" --required _ (take --from 'random $some-tier-cards 1) 1))
          '(pile-copy-to! $street $random-tier-card)
        )

  - name: Scrounge
    tier: 0
    rarity: 1
    types: [action]
    cost: 3
    description:
      ability: Draw two cards, then discard one.
      flavor: "You'd be amazed what people throw out."
    playActions:
      - game-draw! 2
      - stop-if! empty? $hand
      - pile-move-to! $discard (choose --required _ --prompt "Discard a card." $hand 1)

  - name: I Know a Guy
    tier: 0
    rarity: 2
    types: [action]
    cost: 3
    description:
      ability: Create a Burglar (worth +2$) in your hand. Jail this after two uses.
      flavor: "'Actually, I know two guys. But not three.'"
    initActions:
      - card-set! $this 'counter 2
    playActions:
      - pile-copy-to! $hand (card-named "Burglar")
      - card-sub! $this 'counter 1
      - stop-if! gt? (card-get $this 'counter) 0
      - pile-move-to! $jail $this

  - name: Croupier
    tier: 0
    rarity: 1
    types: [thief, trickster]
    cost: 4
    description:
      ability: Gain 2$ and %.
      flavor: "'All bets in?'"
    playActions:
      - game-add! 'cash 2
      - game-add! 'luck 1

  - name: Card Shark
    tier: 0
    rarity: 1
    types: [thief, trickster]
    cost: 4
    description:
      ability: Draw a card. Gain $.
      flavor: "That's not an ace up his sleeve- it's your watch."
    playActions:
      - game-draw! 1
      - game-add! 'cash 1

  # TIER 2 (i.e. 1 when 0-indexed)

  - name: Social Climber
    tier: 1
    rarity: 1
    types: [spy]
    cost: 2
    description:
      ability: Gain 2&. Gets another +& after one use.
      flavor: He makes friends by volunteering to belay.
    playActions:
      - game-add! 'influence 2
      - stop-if! card-has-upgrade? $this 'influence
      - card-upgrade! $this 'influence

  - name: Ditch the Goods
    tier: 1
    rarity: 1
    types: [action]
    cost: 3
    description:
      ability: Discard four cards at random, then draw that many plus one.
      flavor: "Just shove them anywhere!"
    playActions:
      - set '$to-discard take --from 'random $hand 4
      - set '$to-draw-count (size $to-discard)
      - pile-move-to! $discard $to-discard
      - game-draw! + 1 $to-draw-count

  - name: Lady Thistledown
    tier: 1
    rarity: 2
    types: [spy, legend]
    cost: 3
    traits: [swift]
    description:
      ability: "Give another Spy you own +&."
      flavor: You do not know her, and rest assured, you never shall.
    playActions:
      - set '$all-spies filter $owned-cards '(card-has-type? $it 'spy)
      - set '$some-spies filter $all-spies '(! (card-has-upgrade? $it 'influence))
      - set '$spies filter $some-spies '(!= $it $this)
      - stop-if! empty? $spies
      - card-upgrade! (choose-across-piles "Upgrade a Spy." $spies 1) 'influence

  - name: Smitty D
    tier: 1
    rarity: 2
    types: [thief, legend]
    cost: 3
    traits: [swift]
    description:
      ability: "Give another Thief you own +$."
      flavor: Her first name is Aspartamé, which is why she goes by Smitty.
    playActions:
      - set '$all-thieves filter $owned-cards '(card-has-type? $it 'thief)
      - set '$some-thieves filter $all-thieves '(! (card-has-upgrade? $it 'cash))
      - set '$thieves filter $some-thieves '(!= $it $this)
      - stop-if! empty? $thieves
      - card-upgrade! (choose-across-piles "Upgrade a Thief." $thieves 1) 'cash

  - name: Roving Gambler
    tier: 1
    rarity: 1
    types: [thief, spy, trickster]
    cost: 3
    description:
      ability: Gain $, &, and %. At end of turn, shuffle this into your deck.
      flavor: "What's the difference between 'roving' and 'roaming'? He doesn't know, and it haunts him."
    playActions:
      - game-add! 'cash 1
      - game-add! 'influence 1
      - game-add! 'luck 1
      - fx-add! --desc "At end of turn, shuffle Roving Gambler into your deck." --event 'turn-end --data (card-get $this 'id) '(if-true (in? $street (card-with-id $data)) '(run '(pile-move-to! $deck (card-with-id $data)) '(shuffle! $deck)))

  - name: Gold Chain
    tier: 1
    rarity: 0
    types: [treasure]
    cost: 3
    shopCount: 20
    vp: 3
    description:
      ability: When you get this, it gains * for each other Gold Chain you own.
      flavor: Always fashionable, and the more, the better!
    initActions:
      - set '$num-chains count $owned-cards '(= card-get $it 'name "Gold Chain")
      - card-set! $this 'vp '(+ 2 $num-chains)
#only adding 2 because it counts itself


  - name: Heiress
    tier: 1
    rarity: 1
    types: [thief]
    cost: 3
    description:
      ability: Gain 2$. Gets another +$ after one use.
      flavor: "'Where there's a will, there's a way. And fortunately, there was a will.'"
    playActions:
      - game-add! 'cash 2
      - stop-if! card-has-upgrade? $this 'cash
      - card-upgrade! $this 'cash


  - name: Master of Disguise
    tier: 1
    rarity: 1
    types: [thief, spy, trickster]
    cost: 3
    description:
      ability: "Choose one: Gain 2$, 2&, or 2%."
      flavor: Although you don't know it, he's also your wigmaker, sommelier, and second cousin.
    playActions:
      - set '$choices (map (list "Gain 2$." "Gain 2&." "Gain 2%") '(icon-convert $it))
      - set '$chosen-index (index-of $choices single choose $choices 1)
      - if-true (= $chosen-index 0) '(game-add! 'cash 2)
      - if-true (= $chosen-index 1) '(game-add! 'influence 2)
      - if-true (= $chosen-index 2) '(game-add! 'luck 2)

  - name: Smuggle
    tier: 1
    rarity: 2
    types: [action]
    cost: 3
    traits: [suspicious]
    description:
      ability: Draw three cards.
      flavor: Smuggling was invented in 1683 by Sir Percival Smug, who would pack dozens of illicit canaries into mahogany bureaus.
    playActions:
      - game-draw! 3

  - name: Beat Cop
    tier: 1
    rarity: 1
    types: [cop]
    cost: 3
    description:
      ability: When you get this, give 2 Thieves you own +$.
    initActions:
      - set '$all-thieves filter $owned-cards '(card-has-type? $it 'thief)
      - set '$thieves filter $all-thieves '(! (card-has-upgrade? $it 'cash))
      - stop-if! empty? $thieves
      - card-upgrade! (choose-across-piles "Upgrade Thieves." $thieves .. 0 2) 'cash

  - name: Squealer
    tier: 1
    rarity: 1
    types: [spy, cop]
    cost: 4
    description:
      ability: Gain 2&. You may jail a card on the street.
    playActions:
      - game-add! 'influence 2
      - pile-move-to! $jail (choose --prompt "You may jail a card." $street .. 0 1)

  - name: Grift
    tier: 1
    rarity: 1
    types: [action]
    cost: 4
    traits: [suspicious]
    description:
      ability: Gain 3&. Add a card from the shop to the street.
    playActions:
      - game-add! 'influence 3
      - stop-if! empty? $shop
      - pile-move-to! $street (choose --format $fmt-card-with-cost --prompt "Add a card to the street." $shop 1)

  - name: Gentleman Gerald
    tier: 1
    rarity: 2
    types: [cop, legend]
    cost: 4
    description:
      ability: When you get this, gain seven &.
    initActions:
      - game-add! 'influence 7

  - name: Big Bill Murphy
    tier: 1
    rarity: 2
    types: [cop, thief, legend]
    cost: 4
    description:
      ability: Gain 2$. You may convert all your $ to &.
    playActions:
      - game-add! 'cash 2
      - set '$convert (ask? "Would you like to convert your $ into &?")
      - stop-if! ! $convert
      - game-add! 'influence game-get 'cash
      - game-set! 'cash 0

  - name: Mickey the Mouth
    tier: 1
    rarity: 2
    types: [thief, trickster, legend]
    cost: 5
    description:
      ability: Gain $$. When you get this, gain 5%.
    initActions:
      - game-add! 'luck 5
    playActions:
      - game-add! 'cash 2

  - name: Swindler
    tier: 1
    rarity: 0
    types: [spy, trickster]
    cost: 5
    description:
      ability: Draw a card. Gain 2&.
    playActions:
      - game-draw! 1
      - game-add! 'influence 2

  - name: Wanted Poster
    tier: 1
    rarity: 2
    types: [action]
    cost: 5
    traits: [suspicious]
    description:
      ability: Gain 3$. Add a random Legend to the street.
    playActions:
      - game-add! 'cash 3
      - set '$all-legend-cards (filter buyable-card-list '(card-has-type? $it 'legend))
      # Use card-instantiate so we can get an up-to-date VP calculation in the choose screen
      - set '$random-legend card-instantiate (single take --from 'random $all-legend-cards 1)
      # Force a choose screen so that the player can see what card they got. Run it later to give VP calculations time
      # to happen first
      - |
        run-later '(run
          '(choose --prompt "Wanted: Dead or Alive:" --required _ (list $random-legend) 1)
          '(pile-copy-to! $street $random-legend)
        )

  - name: Hottie Mara
    tier: 1
    rarity: 2
    types: [spy, legend]
    cost: 7
    description:
      ability: Gain 9 &.
    playActions:
      - game-add! 'influence 9


# TIER 3

  - name: Jade Ornament
    tier: 2
    rarity: 0
    types: [treasure]
    cost: 3
    description:
      ability: This is worth * for each six cards you own.
    passiveVp: / (size $owned-cards) 6

  - name: Polished Gem
    tier: 2
    rarity: 1
    types: [treasure]
    cost: 3
    vp: 2
    description:
      ability: When you play this card, it gains +2*.
    playActions:
     - card-add! $this 'vp 2

  - name: Crime Wave
    tier: 2
    rarity: 1
    types: [action]
    cost: 3
    traits: [swift]
    description:
      ability: Discard your hand. Create that many plus one Burglars (worth +2$) in your hand. You may give them Suspicious.
    playActions:
      - set '$burglars-sus ask? "Would you like to make your Burglars Suspicious? (Suspicious cards go to jail when played.)"
      - set '$my-burglar single cards-instantiate (list card-named "Burglar")
      - if-true $burglars-sus '(card-add-trait! $my-burglar 'suspicious)
      - set '$num-burglars + 1 (size $hand)
      - pile-move-to! $discard $hand
      - set '$burglarlist map (.. 1 $num-burglars) '$my-burglar
      - pile-copy-to! $hand $burglarlist

# too busted

#  - name: Fortunate Parole
#    tier: 2
#    rarity: 2
#    types: [action]
#    cost: 3
#    description:
#      ability: Gain %. Put a card from jail and a Constable into your hand.
#    playActions:
#      - game-add! 'luck 1
#      - stop-if! empty? $jail
#      - pile-move-to! $hand (choose --prompt "Choose a card to get out of jail." $jail 1)
#      - pile-copy-to! $hand (card-named "Constable")

  - name: Opal
    tier: 2
    rarity: 0
    types: [treasure]
    cost: 4
    vp: 5
    description:
      ability: Do nothing.

  - name: The Talented Mr. Tezuka
    tier: 2
    rarity: 2
    types: [thief, spy, legend]
    cost: 4
    description:
      ability: Gain 2$ and 2&. Jail this after three uses.
    initActions:
      - card-set! $this 'counter 3
    playActions:
      - game-add! 'cash 2
      - game-add! 'influence 2
      - card-sub! $this 'counter 1
      - stop-if! gt? (card-get $this 'counter) 0
      - pile-move-to! $jail $this

  - name: Fence
    tier: 2
    rarity: 2
    types: [trickster]
    cost: 3
    traits: [swift]
    description:
      ability: Shuffle the discard pile into the deck, then discard all Treasures in it.
    playActions:
     - pile-move-to! $deck $discard
     - shuffle! $deck
     - set '$treasures-in-deck (filter $deck '(card-has-type? $it 'treasure))
     - pile-move-to! $discard $treasures-in-deck

  - name: Joey Omaha
    tier: 2
    rarity: 2
    types: [trickster, legend]
    cost: 4
    traits: [swift]
    description:
      ability: Give another Trickster you own +%.
    playActions:
      - set '$all-tricksters filter $owned-cards '(card-has-type? $it 'trickster)
      - set '$some-tricksters filter $all-tricksters '(! (card-has-upgrade? $it 'luck))
      - set '$tricksters filter $some-tricksters '(!= $it $this)
      - stop-if! empty? $tricksters
      - card-upgrade! (choose-across-piles "Upgrade a Trickster." $tricksters 1) 'luck

  - name: Racketeer
    tier: 2
    rarity: 1
    types: [thief, trickster]
    cost: 4
    description:
      ability: Gain 2$. Gain 2% if you own 20 or more cards.
    playActions:
      - game-add! 'cash 2
      - if-true (gte? (size $owned-cards) 20) '(game-add! 'luck 2)


# too busted

#  - name: Art Forger
#    tier: 2
#    rarity: 2
#    types: [thief, trickster]
#    cost: 5
#    description:
#      ability: Gain 2$. You may reroll your shop with cards you own.
#    playActions:
#      - game-add! 'cash 2
#      - stop-if! (! (ask? "Reroll your shop with cards you own?" ))
#      - set '$cardnames (map $owned-cards '(card-get $it 'name))
#      - shop-reroll! '(in? $cardnames (card-get $card 'name))

  - name: Baby Teeth Nelson
    tier: 2
    rarity: 1
    types: [thief, legend]
    cost: 5
    traits: [expendable]
    description:
      ability: Burn all Cops you own. Draw a card for each plus one for this.
    playActions:
      - set '$owned-cops (filter $owned-cards '(card-has-type? $it 'cop))
      - card-remove! $owned-cops
      - game-draw! + 1 (size $owned-cops)

  - name: High Roller
    tier: 1
    rarity: 0
    types: [trickster]
    cost: 5
    description:
      ability: Draw a card. Gain %.
    playActions:
      - game-draw! 1
      - game-add! 'luck 1

  - name: "'Velvet Thunder' Bauer"
    tier: 2
    rarity: 2
    types: [cop, legend]
    cost: 5
    description:
      ability: When you get this, jail all Pickpockets and Newsies.
    initActions:
      - pile-move-to! $jail filter $owned-cards '(= card-get $it 'name "Pickpocket")
      - pile-move-to! $jail filter $owned-cards '(= card-get $it 'name "Newsie")

  - name: Safecracker
    tier: 2
    rarity: 0
    types: [thief]
    cost: 5
    description:
      ability: Gain 3$.
    playActions:
      - game-add! 'cash 3

  - name: The Pony Tack Bandit
    tier: 2
    rarity: 2
    types: [thief, trickster, legend]
    cost: 6
    description:
      ability: Gain 2$. You may reroll your shop with Treasures.
    playActions:
      - game-add! 'cash 2
      - stop-if! (! (ask? "Reroll your shop with Treasures?" ))
      - shop-reroll! '(card-has-type? $card 'treasure)

# Too ubiquitous, trying without
#
#  - name: Turf Expansion
#    tier: 2
#    rarity: 1
#    types: [action]
#    cost: 6
#    shopCount: 1
#    description:
#      ability: Set your hand size to 6. Burn this card.
#    playActions:
#     - game-set! 'hand-size 6
#     - card-remove! $this

  - name: Bada Bing!
    tier: 2
    rarity: 2
    types: [action]
    cost: 6
    traits: [swift, expendable]
    description:
      ability: "Get two copies of a card you own that costs 3$ or less."
    playActions:
      - card-remove! $this
      - set '$low-cost-owned (filter $owned-cards '(lte? (card-get $it 'cost) 3))
      - cancel-if! empty? $low-cost-owned
      - set '$card-to-copy (choose-across-piles "Get two copies of a card." $low-cost-owned 1)
      - pile-copy-to! $street $card-to-copy
      # We need to use run-later below for Gold Chain, a card which, when it is created, checks to see how many other
      # gold chains are in your cards. By deferring the second card's creation, we get the behavior we intuitively
      # expect to happen (the first gold chain doesn't see the second).
      - run-later '(pile-copy-to! $street $card-to-copy)

  - name: Impersonate
    tier: 2
    rarity: 2
    types: [action]
    cost: 6
    traits: [expendable]
    description:
      ability: Add an exact copy of a card in your hand to your hand.
    playActions:
      - stop-if! empty? $hand
      - set '$copied-card single (choose --prompt "Copy a card." $hand 1)
      - set '$my-name card-get $this 'name
      - if-true (= $my-name card-get $copied-card 'name) '(run '(info "How can you impersonate the act of impersonation? That just sounds confusing.") '(cancel!))
      - card-remove! $this
      - pile-copy-to! $hand $copied-card


# TIER 4

  - name: Patrolman's Badge
    tier: 3
    rarity: 1
    types: [treasure]
    cost: 3
    description:
      ability: This is worth * for every Cop you own.
    passiveVp: count $owned-cards '(card-has-type? $it 'cop)

  - name: Gilded Cage
    tier: 3
    rarity: 1
    types: [treasure]
    cost: 3
    description:
      ability: This is worth ** for each five cards in jail.
    passiveVp: * 2 (/ (size $jail) 5)

  - name: Pawnbroker
    tier: 3
    rarity: 1
    types: [thief]
    cost: 4
    description:
      ability: You may choose a card on the street to jail. Gain $ equal to its tier plus 2.
    playActions:
      - set '$maybe-card-to-jail (choose --prompt "You may jail a card." $street .. 0 1)
      - game-add! 'cash 2
      - stop-if! empty? $maybe-card-to-jail
      - set '$card-to-jail single $maybe-card-to-jail
      - pile-move-to! $jail $card-to-jail
      - game-add! 'cash + 1 card-get $card-to-jail 'tier


  - name: One Last Job
    tier: 3
    rarity: 1
    types: [action]
    cost: 3
    description:
      ability: Return a card from discard or jail to your hand. It gains Expendable.
    playActions:
     - set '$discard-or-jail (union $discard $jail)
     - cancel-if! (empty? $discard-or-jail)
     - set '$card-to-play single (choose-across-piles "Get back a card and give it Expendable." $discard-or-jail 1)
     # Move the card to the hand first which will trigger init actions as a side effect if the card is coming from jail
     - pile-move-to! $hand $card-to-play
     - card-add-trait! $card-to-play 'expendable

  - name: Police Trainer
    tier: 3
    rarity: 1
    types: [cop]
    cost: 4
    traits: [swift]
    description:
      ability: "Give another Cop you own \"Draw a card, then discard a card.\""
    playActions:
      - set '$all-cops filter $owned-cards '(card-has-type? $it 'cop)
      - set '$some-cops filter $all-cops '(! (card-has-upgrade? $it 'veteran))
      - set '$cops filter $some-cops '(!= $it $this)
      - stop-if! empty? $cops
      - card-upgrade! (choose-across-piles "Upgrade a Cop." $cops 1) 'veteran


  - name: Dirty Sergeant
    tier: 3
    rarity: 1
    types: [cop]
    cost: 4
    description:
      ability: Gain $ for every Cop you own. (max 8)
    playActions:
      - game-add! 'cash min 8 (count $owned-cards '(card-has-type? $it 'cop))

  - name: Antiquarian
    tier: 3
    rarity: 1
    types: [trickster]
    cost: 4
    description:
      ability: Gain %%. At end of turn, you may put a Thief from the street on top of your deck.
    playActions:
      - game-add! 'luck 2
      - fx-add! --desc "At end of turn, you may put a Thief from the street on top of your deck." --event 'turn-end '(if-false empty? (filter $street '(card-has-type? $it 'thief)) '(pile-move-to! --pos 'front $deck (choose --required _ --prompt "You may put a Thief on top of your deck." (filter $street '(card-has-type? $it 'thief)) .. 0 1)))


  - name: Ruthven Catsby, Esq.
    tier: 3
    rarity: 2
    types: [spy, legend]
    cost: 4
    description:
      ability: Gain 2&. You may convert all your & to $.
    playActions:
      - game-add! 'influence 2
      - set '$convert (ask? "Would you like to convert your & into $?")
      - stop-if! ! $convert
      - game-add! 'cash game-get 'influence
      - game-set! 'influence 0

  - name: Purse Snatcher
    tier: 3
    rarity: 1
    types: [thief]
    cost: 5
    description:
      ability: Add a card from the shop to the street and a useless Constable to your hand.
    playActions:
      - stop-if! empty? $shop
      - pile-move-to! $street (choose --format $fmt-card-with-cost --prompt "Add a card to the street." $shop 1)
      - pile-copy-to! $hand (card-named "Constable")


#  - name: Old Gaffin
#    tier: 3
#    rarity: 2
#    types: [thief, legend]
#    cost: 5
#    description:
#      ability: Gain 2$. Gain * whenever you play a Pickpocket or Burglar this turn.
#    playActions:
#      - game-add! 'cash 2
#      - fx-add! --desc (icon-convert "Gain * whenever you play a Pickpocket or Burglar.") --data (card-get $this 'id) '(if-true or? (= card-get $card 'name "Pickpocket") (= card-get $card 'name "Burglar") '(card-add! card-with-id $data 'vp 1))


  - name: Gem Cutter
    tier: 3
    rarity: 1
    types: [thief, trickster]
    cost: 5
    description:
      ability: Gain 2$. You may jail a Treasure you own. This gains its *.
    playActions:
     - game-add! 'cash 2
     - set '$treasures-to-jail (filter $owned-cards '(card-has-type? $it 'treasure))
     - stop-if! empty? $treasures-to-jail
     - set '$maybe-card-to-jail (choose-across-piles "You may jail a Treasure." $treasures-to-jail .. 0 1)
     - stop-if! empty? $maybe-card-to-jail
     - set '$card-to-jail single $maybe-card-to-jail
     - card-add! $this 'vp (card-get $card-to-jail 'vp-total)
     - pile-move-to! $jail $card-to-jail

  - name: Ruby
    tier: 3
    rarity: 0
    types: [treasure]
    cost: 6
    description:
      ability: Do nothing.
    vp: 7

  - name: Looter
    tier: 3
    rarity: 2
    types: [thief]
    cost: 6
    description:
      ability: "Gain 3$. Draw all Treasures from the top seven cards of the deck."
    playActions:
      - game-add! 'cash 3
      - run
         '(info "You search the top seven cards of the deck for treasures...")
         '(pile-move-to! $hand filter (take --from 'front $deck 7) '(card-has-type? $it 'treasure))

  - name: Bank Robber
    tier: 3
    rarity: 0
    types: [thief]
    cost: 6
    description:
      ability: Gain 4$.
    playActions:
      - game-add! 'cash 4

  - name: Corrupt Bailiff
    tier: 3
    rarity: 1
    types: [spy, cop]
    cost: 6
    description:
      ability: Gain 3&. You may spend 6& to give this card 6*.
    playActions:
      - game-add! 'influence 3
      - stop-if! < game-get 'influence 6
      - set '$convert (ask?! "Would you like to spend 6& to give this card 6*?")
      - stop-if! ! $convert
      - game-add! 'influence -6
      - card-add! $this 'vp 6

  - name: Offer You Can't Refuse
    tier: 2
    rarity: 2
    types: [action]
    cost: 6
    description:
      ability: Choose a card from your deck or discard pile to put into your hand.
    playActions:
      - pile-move-to! $hand (choose-across-piles "Put a card into your hand." (union $deck $discard) 1)

  - name: Mr. Big
    tier: 2
    rarity: 1
    types: [thief, legend]
    cost: 5
    description:
      ability: Gain $ for each Thief on the street. (max 8)
    playActions:
      - game-add! 'cash min 8 (count $street '(card-has-type? $it 'thief))

  - name: Three-Card Monte
    tier: 3
    rarity: 1
    types: [action]
    cost: 5
    description:
      ability: Draw three cards, then discard two.
    playActions:
      - game-draw! 3
      - stop-if! empty? $hand
      - pile-move-to! $discard (choose --required _ --prompt "Discard cards." $hand 2)

# TIER 5

  - name: The Friends We Made Along The Way
    tier: 4
    rarity: 2
    types: [treasure]
    cost: 4
    description:
      ability: This is worth * for every Legend you own or in jail.
    passiveVp: size (filter (union $owned-cards $jail) '(card-has-type? $it 'legend))

  - name: Lucky Emerald
    tier: 4
    rarity: 1
    types: [treasure]
    cost: 5
    vp: 5
    description:
      ability: Gain 2%.
    playActions:
      - game-add! 'luck 2

  - name: Double-Dealer
    tier: 4
    rarity: 1
    types: [trickster]
    cost: 7
    description:
      ability: Draw two cards.
    playActions:
      - game-draw! 2

  - name: Annie Doshen
    tier: 4
    rarity: 2
    types: [trickster, legend]
    cost: 7
    description:
      ability: Gain %. This is worth * for each upgraded card you own.
    passiveVp: count $owned-cards '(card-has-any-upgrade? $it)
    playActions:
      - game-add! 'luck 1

  - name: Jailbreak
    tier: 4
    rarity: 2
    types: [action]
    cost: 6
    traits: [expendable]
    description:
      ability: Put up to two cards from Jail into your hand.
    playActions:
      - pile-move-to! $hand (choose --prompt "Get cards out of jail." $jail .. 0 2)
      - card-remove! $this

# Too ubiquitous, trying without
#
#  - name: Corner the Market
#    tier: 4
#    rarity: 1
#    types: [action]
#    cost: 7
#    shopCount: 1
#    description:
#      ability: Set your hand size to 7. Burn this card.
#    playActions:
#     - game-set! 'hand-size 7
#     - card-remove! $this

  - name: Real Estate Fraud
    features: [buildings]
    tier: 4
    rarity: 2
    types: [action]
    cost: 7
    traits: [swift, expendable]
    shopCount: 1
    description:
      ability: Get one of two random blueprints.
    playActions:
      - blueprint-own! single choose --prompt "Get a blueprint." --format $fmt-blueprint-with-cost --required _ (take --from 'random $unowned-blueprints 2) 1
      - card-remove! $this


  - name: Kingpin
    tier: 4
    rarity: 0
    types: [thief]
    cost: 7
    description:
      ability: Gain 5$.
    playActions:
      - game-add! 'cash 5

  - name: Elegant Earrings
    tier: 4
    rarity: 1
    types: [treasure]
    cost: 7
    vp: 12
    description:
      ability: Comes as a set of two Pearl Earrings worth 6 VP each.
    initActions:
      - pile-copy-to! $street card-named "Pearl Earring"
      - pile-copy-to! $street card-named "Pearl Earring"
      - card-remove! $this

  - name: Pearl Earring
    tier: 4
    rarity: 1
    types: [treasure]
    cost: 0
    vp: 6
    description:
      ability: Do nothing.

  - name: Diamond
    tier: 4
    rarity: 0
    types: [treasure]
    cost: 8
    vp: 10
    description:
      ability: Do nothing.

  - name: Ultimate Heist
    tier: 4
    rarity: 1
    types: [action]
    cost: 9
    description:
      ability: Add all Treasures from the shop to the street. Reroll the shop.
    playActions:
      - pile-move-to! $street (filter $shop '(card-has-type? $it 'treasure))
      - shop-reroll! 'true

#
#
#
# Blueprints start here!
#
#
#

blueprints:

  - name: Clown College
    rarity: 2
    description:
      ability: "Activate: Choose and discard three cards to add a Mime to your hand."
    buildCost:
      cash: 4
      influence: 4
    canActivate: gte? (size $hand) 3
    activateActions: 
      - pile-move-to! $discard (choose --prompt "Discard cards." $hand 3)
      - pile-copy-to! $hand (card-named "Mime")



# not working now, figure out later
#
#  - name: Fashion Runway
#    rarity: 1
#    description:
#      ability: "When you build this, randomly choose a type. When you get a card of that type, gain ***."
#    buildCost:
#      cash: 3
#      influence: 3
#    canActivate: false
#    initActions:
#      - game-data-set! '$fashion-type random (list "action" "treasure" "cop" "thief" "spy" "trickster" "legend")
#      - info "The hottest fashion trend of the season is:"
#      - info (game-data-get $fashion-type)

  - name: Docks
    rarity: 1
    description:
      ability: At end of turn, gain * for each card in your hand.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false # Passive building
    initActions:
      - fx-add! --desc (icon-convert "At end of turn, gain * for each card in your hand.") --lifetime 'game --event 'turn-end --data (building-get $this 'id) '(building-add! building-with-id $data 'vp (size $hand))


  - name: Trinity Cathedral
    rarity: 1
    description:
      ability: "Activate: The next card you play takes effect an additional three times. (Once per game.)"
    buildCost:
      cash: 3
      influence: 3
    canActivate: = (building-get $this 'counter) 0
    activateActions:
      - fx-add! --lifetime 'once --desc "Your next card takes effect an additional three times." '(run '(card-trigger! $card) '(card-trigger! $card) '(card-trigger! $card))
      - building-set! $this 'counter 1


  - name: Limousine Service
    rarity: 2
    description:
      ability: "Activate: The next card you get this turn goes straight to your hand."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      cash: 2
    activateActions:
      - fx-add! --desc "Get an extra copy of the next card you get this turn." --lifetime 'once --event 'create '(run-later '(pile-move-to! $hand $card))


  - name: Circus Tent
    rarity: 2
    description:
      ability: Whenever you play a Trickster, discard your hand and draw that many cards.
    buildCost:
      cash: 6
      influence: 6
    canActivate: false
    initActions:
      - fx-add! --lifetime 'game --desc "Whenever you play a Trickster, discard your hand and draw that many cards." '(if-true (card-has-type? $card 'trickster) '(run '(set '$cardstodraw size $hand) '(pile-move-to! $discard $hand) '(game-draw! $cardstodraw)))


  - name: Tenement
    rarity: 2
    description:
      ability: "At start of turn, draw two cards if your shop is tier 3 or lower."
    buildCost:
      cash: 3
      influence: 3
    canActivate: false
    initActions:
      - fx-add! --desc "At start of turn, draw two cards if your shop is tier 3 or lower." --lifetime 'game --event 'turn-start '(if-true (lte? $shop-tier $tier3) '(game-draw! 2))

  - name: University
    rarity: 0
    description:
      ability: Your hand size is 6.
    buildCost:
      cash: 6
      influence: 6
    canActivate: false
    initActions:
     - game-set! 'hand-size 6


  - name: Surveillance Company
    rarity: 0
    description:
      ability: "Activate: Draw all Spies from the top five cards of the deck."
    buildCost:
      cash: 4
      influence: 4
    activateActions:
      - run
         '(info "You search the top five cards of the deck for spies...")
         '(pile-move-to! $hand filter (take --from 'front $deck 5) '(card-has-type? $it 'spy))

  - name: Dumpster
    rarity: 1
    description:
      ability: When you build this, choose one of eight random cards to get. Jail the rest.
    buildCost:
      cash: 2
      influence: 2
    canActivate: false
    initActions:
      - run
         '(set '$potential-cards (take --from 'random buyable-card-list 8))
         '(set '$card-to-copy choose --required true --prompt "Get a card." $potential-cards 1)
         '(set '$garbage filter $potential-cards '(! = (card-get $it 'name) (card-get (single $card-to-copy) 'name)))
         '(pile-copy-to! $street $card-to-copy)
         '(pile-copy-to! $jail $garbage)

  - name: Ad Agency
    rarity: 2
    description:
      ability: "Activate: Triple your &. (Once per game.)"
    buildCost:
      cash: 3
      influence: 3
    canActivate: = (building-get $this 'counter) 0
    activateActions:
      - game-add! 'influence (* 2 game-get 'influence)
      - building-set! $this 'counter 1


  - name: Factory
    rarity: 1
    description:
      ability: When you build this, get a copy of three cards you own.
    buildCost:
      cash: 6
      influence: 6
    canActivate: false
    initActions:
      - pile-copy-to! $street choose-across-piles "Copy cards." $owned-cards 3


  - name: Playground
    rarity: 2
    description:
      ability: Whenever you play a Pickpocket or Newsie, draw a card.
    buildCost:
      cash: 6
      influence: 6
    canActivate: false
    initActions:
      - fx-add! --lifetime 'game --desc (icon-convert "Whenever you play a Pickpocket or Newsie, draw a card.") '(if-true or? (= card-get $card 'name "Pickpocket") (= card-get $card 'name "Newsie") '(game-draw! 1))


  - name: Aquarium
    rarity: 1
    description:
      ability: "Activate: Burn a Cop you own. This gains 5*."
      flavor: Technically, being eaten by an orca does not count as sleeping with the fishes.
    buildCost:
      cash: 2
      influence: 2
    activationCost:
      cash: 1
    canActivate: ! empty? (filter $owned-cards '(card-has-type? $it 'cop))
    activateActions:
      - card-remove! choose-across-piles "Burn a Cop." (filter $owned-cards '(card-has-type? $it 'cop)) 1
      - building-add! $this 'vp 5


  - name: Junkyard
    rarity: 1
    description:
      ability: "Activate: Shuffle a card from the street or discard pile into the deck."
    buildCost:
      cash: 1
      influence: 1
    canActivate: ! empty? (union $street $discard)
    activateActions:
      - pile-move-to! $deck choose-across-piles "Shuffle a card into your deck." (union $street $discard) 1
      - shuffle! $deck

  - name: Taxi Stand
    rarity: 0
    description:
      ability: "Activate: Choose one of two random cards of your shop tier to add to the street."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      cash: 2
    activateActions:
      # Instantiate cards so that we'll have real VP counts when we make a choice
      - set '$choices cards-instantiate take --from 'random (filter buyable-card-list '(= $shop-tier (card-get $it 'tier))) 2
      # Run the choose later which gives VP points room to calculate first
      - run-later '(pile-copy-to! $street choose --prompt "Get a card of your shop tier." --format $fmt-card-with-cost --required _ $choices 1)


  - name: Public Library
    rarity: 2
    description:
      ability: At start of turn, you may copy each card in your hand to the street.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false
    initActions:
      - fx-add! --desc "At start of turn, you may copy each card in your hand to the street." --lifetime 'game --event 'turn-start '(run '(choose --required true --prompt "This is your hand. Copy it to the street? (Answer on next screen.)" $hand size $hand) '(if-true (ask? "Copy your hand to the street?") '(pile-copy-to! $street $hand)))


  - name: Opera House
    rarity: 1
    description:
      ability: "Activate: Play a card from jail, then burn it."
    buildCost:
      cash: 2
      influence: 2
    canActivate: ! empty? $jail
    activateActions:
     - set '$card-to-play single (choose --prompt "Play and burn a card." $jail 1)
     - pile-move-to! $hand $card-to-play
     - card-play! $card-to-play
     - run-later '(card-remove! $card-to-play)


  - name: Forger's Workshop
    rarity: 1
    description:
      ability: "Activate: Get an extra copy of the next card you get this turn."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      cash: 2
    activateActions:
      - fx-add! --desc "Get an extra copy of the next card you get this turn." --lifetime 'once --event 'create '(run-later '(pile-copy-to! $street $card))


  - name: Flea Market
    rarity: 1
    description:
      ability: When you build this, get three random Tier 3 cards.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false
    initActions:
      - set '$all-tier-cards (filter buyable-card-list '(= $tier3 (card-get $it 'tier)))
      - set '$random-tier-cards (take --from 'random $all-tier-cards 3)
      - choose --required true --prompt "Here's what you found at the Flea Market." $random-tier-cards 3
      - pile-copy-to! $street $random-tier-cards

  - name: Banana Stand
    rarity: 1
    description:
      ability: "This gets a banana counter at the start of every turn.\nActivate: sell bananas for $ each."
    buildCost:
      cash: 1
      influence: 1
    canActivate: gt? (building-get $this 'counter) 0
    initActions:
      - fx-add! --desc "Get a banana counter at the start of every turn." --lifetime 'game --event 'turn-start --data (building-get $this 'id) '(building-add! building-with-id $data 'counter 1)
    activateActions:
      - game-add! 'cash (building-get $this 'counter)
      - building-set! $this 'counter 0


  - name: Exclusive Lounge
    rarity: 2
    description:
      ability: "Activate: Reroll the shop with Legends."
    buildCost:
      cash: 4
      influence: 4
    canActivate: gt? $shop-tier 0
    activateActions:
      - shop-reroll! '(card-has-type? $card 'legend)

  - name: Construction Company
    rarity: 0
    description:
      ability: When you build this, get two random blueprints.
    buildCost:
      cash: 2
      influence: 2
    canActivate: false # Passive building
    initActions:
      - blueprint-own! single take --from 'random $unowned-blueprints 1
      - blueprint-own! single take --from 'random $unowned-blueprints 1

  - name: Zoning Board
    rarity: 0
    description:
      ability: When you build this, get one of three random blueprints.
    buildCost:
      cash: 1
      influence: 1
    canActivate: false # Passive building
    initActions:
      - blueprint-own! single choose --prompt "Get a blueprint." --format $fmt-blueprint-with-cost --required _ (take --from 'random $unowned-blueprints 3) 1

  - name: Interrogation Room
    rarity: 2
    description:
      ability: At end of turn, jail one of two random cards you own.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false # Passive building
    initActions:
      - fx-add! --desc "At end of turn, jail one of two random cards you own." --lifetime 'game --event 'turn-end '(run
         '(cancel-if! (< (size $owned-cards) 2))
         '(set '$suspects (take --from 'random $owned-cards 2))
         '(pile-move-to! $jail (choose-across-piles! "An interrogation occurs. Jail a card." $suspects 1))
         )

  - name: School of Hard Knocks
    rarity: 1
    description:
      ability: "Activate: Fully upgrade a Thief, Spy, Trickster, or Cop in your hand."
    buildCost:
      cash: 4
      influence: 4
    canActivate: ! (empty? filter $hand '(card-has-any-of-types? $it (list "thief" "spy" "trickster" "cop")))
    activationCost:
      cash: 2
    activateActions:
      - set '$students filter $hand '(card-has-any-of-types? $it (list "thief" "spy" "trickster" "cop"))
      - cancel-if! empty? $students
      - set '$card-to-upgrade (single (choose --prompt "Upgrade a card." $students 1))
      - if-true (card-has-type? $card-to-upgrade 'thief) '(card-upgrade! $card-to-upgrade 'cash)
      - if-true (card-has-type? $card-to-upgrade 'spy) '(card-upgrade! $card-to-upgrade 'influence)
      - if-true (card-has-type? $card-to-upgrade 'trickster) '(card-upgrade! $card-to-upgrade 'luck)
      - if-true (card-has-type? $card-to-upgrade 'cop) '(card-upgrade! $card-to-upgrade 'veteran)

  - name: Bureau Headquarters
    rarity: 1
    description:
      ability: When you build this, put Agent Magpie on the case.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false # Passive building
    initActions:
      - set '$magpie card-named "Agent Magpie"
      - choose --required true --prompt "Agent Magpie is on the case!" (list $magpie) 1
      - pile-copy-to! $street $magpie

  - name: Wine Cellar
    rarity: 1
    description:
      ability: This gains *** at the start of every turn.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false # Passive building
    initActions:
      - fx-add! --desc (icon-convert "Gain *** at the start of every turn.") --lifetime 'game --event 'turn-start --data (building-get $this 'id) '(building-add! building-with-id $data 'vp 3)

  - name: Five and Dime
    rarity: 0
    description:
      ability: Whenever you get a card, this gains *.
    buildCost:
      cash: 2
      influence: 2
    canActivate: false # Passive building
    initActions:
      - fx-add! --desc (icon-convert "Whenever you get a card, gain *.") --lifetime 'game --event 'create --data (building-get $this 'id) '(building-add! building-with-id $data 'vp 1)


  - name: Police Station
    rarity: 1
    description:
      ability: Whenever you get a Cop, gain $$ and &&.
    buildCost:
      cash: 2
      influence: 2
    canActivate: false # Passive building
    initActions:
      - fx-add! --desc (icon-convert "Whenever you get a Cop, gain $$ and &&.") --lifetime 'game --event 'create '(if-true (card-has-type? $card 'cop) '(run '(game-add! 'cash 2) '(game-add! 'influence 2)))


  - name: Poker Parlor
    rarity: 1
    description:
      ability: Whenever you shuffle your deck, this gains ***.
    buildCost:
      cash: 2
      influence: 2
    canActivate: false # Passive building
    initActions:
      - fx-add! --desc (icon-convert "Whenever you shuffle your deck, gain ***.") --lifetime 'game --data (building-get $this 'id) --event 'shuffle '(if-true (= $pile $deck) '(building-add! building-with-id $data 'vp 3))


  - name: City Hall
    rarity: 0
    description:
      ability: "Activate: Gain 4&."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      cash: 2
    activateActions:
      - game-add! 'influence 4


  - name: Stock Exchange
    rarity: 0
    description:
      ability: "Activate: Gain 4$."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      influence: 2
    activateActions:
      - game-add! 'cash 4

  - name: Newsstand
    rarity: 0
    description:
      ability: "Activate: Draw a card."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      cash: 1
    activateActions:
      - game-draw! 1

  - name: Dark Alley
    rarity: 1
    description:
      ability: "Activate: Draw a card for each Burglar in your hand."
    buildCost:
      cash: 4
      influence: 4
    canActivate: any? $hand '(= card-get $it 'name "Burglar")
    activateActions:
      - game-draw! count $hand '(= card-get $it 'name "Burglar")


  - name: Craps Den
    rarity: 0
    description:
      ability: "Activate: Roll a die. Gain that much $."
    buildCost:
      cash: 2
      influence: 2
    activationCost:
      luck: 1
    activateActions:
      - game-add! 'cash random .. 1 6

  - name: Cinema
    rarity: 1
    description:
      ability: At end of turn, choose a card from the street to put on top of your deck.
    buildCost:
      cash: 6
      influence: 6
    canActivate: false
    initActions:
      - fx-add! --desc "At end of turn, choose a card from the street to put on top of your deck." --event 'turn-end --lifetime 'game '(if-false empty? $street '(pile-move-to! --pos 'front $deck (choose --prompt "Choose a card to put on top of your deck." --required _ $street 1)))


  - name: Jazz Club
    rarity: 0
    description:
      ability: At the beginning of every turn, randomly gain $$, &&, or %%.
    buildCost:
      cash: 2
      influence: 2
    canActivate: false
    initActions:
      - fx-add! --desc (icon-convert "At the beginning of every turn, randomly gain $$, &&, or %%.") --event 'turn-start --lifetime 'game '(run 
         '(set '$chosen-index (random .. 0 2))
         '(if-true (= $chosen-index 0) '(game-add! 'cash 2))
         '(if-true (= $chosen-index 1) '(game-add! 'influence 2))
         '(if-true (= $chosen-index 2) '(game-add! 'luck 2)))

  - name: Pawn Shop
    rarity: 2
    description:
      ability: "Activate: Reroll the shop with cards you own."
    buildCost:
      cash: 3
      influence: 3
    activateActions:
      - set '$cardnames (map $owned-cards '(card-get $it 'name))
      - shop-reroll! '(in? $cardnames (card-get $card 'name))

  - name: Chop Shop
    rarity: 0
    description:
      ability: "Activate: Jail a card you own. Get a random card one Tier higher."
    buildCost:
      cash: 3
      influence: 3
    activationCost:
      cash: 2
    activateActions:
      - set '$cardtoreplace (single (choose-across-piles "Jail a card." $owned-cards 1))
      - set '$newtier min $tier5 (+ 1 card-get $cardtoreplace 'tier)
      - pile-move-to! $jail $cardtoreplace
      # Use cards-instantiate so we can get up-to-date VP calculations in the choose screen
      - set '$all-tier-cards cards-instantiate (filter buyable-card-list '(and? (! = (card-get $cardtoreplace 'name)(card-get $it 'name))(= $newtier (card-get $it 'tier))))
      # Force a choose screen so that the player can see what card they got. Run it later to give VP calculations time
      # to happen first
      - |
        run-later '(run
          '(set '$random-tier-card (choose --prompt "Your new card is:" --required _ (take --from 'random $all-tier-cards 1) 1))
          '(pile-copy-to! $street $random-tier-card)
        )

  - name: Swanky Ballroom
    rarity: 1
    description:
      ability: This is worth * for each & you have.
    buildCost:
      cash: 5
      influence: 5
    canActivate: false
    passiveVp: game-get 'influence

  - name: Gleaming Skyscraper
    rarity: 2
    description:
      ability: This is worth 100 *.
    buildCost:
      cash: 20
      influence: 20
    canActivate: false
    passiveVp: 100

  - name: Greyhound Track
    rarity: 1
    description:
      ability: This is worth ** for each % you have.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false
    passiveVp: * 2 (game-get 'luck)

  - name: Art Gallery
    rarity: 1
    description:
      ability: This is worth * for each differently named card you own.
    buildCost:
      cash: 3
      influence: 3
    canActivate: false
    passiveVp: size (distinct (map $owned-cards '(card-get $it 'name)))

  - name: Boxing Ring
    rarity: 0
    description:
      ability: "Activate: The next Action you play this turn takes effect an additional time."
    buildCost:
      cash: 4
      influence: 4
    activateActions:
      - fx-add! --lifetime 'once --desc "Your next Action takes effect an additional time." --if '(card-has-type? $card 'action) '(card-trigger! $card)

  - name: Mob Mansion
    rarity: 1
    description:
      ability: Whenever you play a Thief, this gains *.
    buildCost:
      cash: 8
      influence: 8
    canActivate: false
    initActions:
      - fx-add! --lifetime 'game --desc (icon-convert "Whenever you play a Thief, gain *.") --data (building-get $this 'id) '(if-true (card-has-type? $card 'thief) '(building-add! building-with-id $data 'vp 1))

  - name: Counterfeiting Press
    rarity: 1
    description:
      ability: "Activate: Get a copy of a Treasure you own that costs 3$ or less."
    buildCost:
      cash: 6
      influence: 6
    activationCost:
      cash: 3
      luck: 1
    canActivate: ! empty? filter $owned-cards '(and? (card-has-type? $it 'treasure) (lte? card-get $it 'cost 3))
    activateActions:
      - set '$treasures filter $owned-cards '(card-has-type? $it 'treasure)
      - set '$low-cost-treasures filter $treasures '(lte? card-get $it 'cost 3)
      - cancel-if! empty? $low-cost-treasures
      - set '$copied-card (choose --prompt "Choose a Treasure to copy." $low-cost-treasures 1)
      - pile-copy-to! $street $copied-card

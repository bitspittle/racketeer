title: Do Crimes
icons:
  cash: "💰"
  influence: "🤝"
  luck: "🎲"
  card: "🃏"
  vp: "🌟"
numTurns: 20
initialHandSize: 5
initialCash: 0
initialInfluence: 0
initialLuck: 0
initialDeck:
  - Pickpocket 5
  - Newsie 3
cardTypes:
  # Ordered by how they should show up on a card, NOT alphabetically necessarily
  - Action
  - Treasure
  - Cop
  - Thief
  - Spy
  - Trickster
  - Legend

upgradeNames:
  cash: Dextrous
  influence: Artful
  luck: Lucky
  veteran: Veteran

rarities:
  - name: Common
    frequency: 4
  - name: Uncommon
    frequency: 2
  - name: Rare
    frequency: 1

tierFrequencies:
  - 5
  - 6
  - 7
  - 8
  - 9

shopSizes:
  - 3
  - 4
  - 5
  - 6
  - 7

shopPrices:
  - 5
  - 8
  - 12
  - 15

rankings:
      - name: "D   Pickpocket"
        score: 0
      - name: "D+  Newsie"
        score: 10
      - name: "C-  Embezzler"
        score: 20
      - name: "C   Burglar"
        score: 30
      - name: "C+  Croupier"
        score: 40
      - name: "B-  Smuggler"
        score: 50
      - name: "B   Grifter"
        score: 60
      - name: "B+  Swindler"
        score: 70
      - name: "A-  Fence"
        score: 85
      - name: "A   Safecracker"
        score: 100
      - name: "A+  Purse Snatcher"
        score: 120
      - name: "S-  Bank Robber"
        score: 150
      - name: "S   Kingpin"
        score: 180
      - name: "S+  Annie Doshen"
        score: 250

globalActions:
  # yaml freaks out a bit about some characters (e.g. | or >, which it tries to interpret), so define non-symbol
  # versions of everything in case that helps avoid those cases without needing to wrap things in quotes
  - "alias 'and? '&&"
  - "alias 'or? '||"
  - "alias 'eq? '="
  - "alias 'ne? '!="
  - "alias 'lt? '<"
  - "alias 'lte? '<="
  - "alias 'gt? '>"
  - "alias 'gte? '>="
  - def 'set! --inline _ '$name '$value '(set --overwrite _ $name $value)
  - def 'game-add! '$property '$amount '(game-set! $property '(+ $it $amount))
  - def 'game-sub! '$property '$amount '(game-set! $property '(- $it $amount))
  - def 'card-add! '$card '$property '$amount '(card-set! $card $property '(+ $it $amount))
  - def 'card-sub! '$card '$property '$amount '(card-set! $card $property '(- $it $amount))
  - def 'if-true '$cond '$expr '(if $cond $expr _)
  - def 'if-false '$cond '$expr '(if $cond _ $expr)
  - def 'stop-if! '$cond '(if $cond '(stop!) _)
  - def 'cancel-if! '$cond '(if $cond '(cancel!) _)
  - def 'concat-to-string '$strs '(join-to-string --separator "" $strs)
  - def 'ask? '$prompt '(= (single (choose --prompt icon-convert $prompt (list "Yes" "No") 1)) "Yes")
  - def 'ask?! '$prompt '(= (single (choose --required _ --prompt icon-convert $prompt (list "Yes" "No") 1)) "Yes")
  - def 'card-has-any-of-types? '$card '$types '(any? (card-get $card 'types) '(in? $types $it))
  - def 'card-has-all-types? '$card '$types '(all? (card-get $card 'types) '(in? $types $it))
  - def 'card-upgrade-count '$card '(size card-upgrades $card)
  - def 'card-has-any-upgrade? '$card '(gt? (card-upgrade-count $card) 0)
  - def 'card-named '$name '(single --matching '(= card-get $it 'name $name) $card-list)
  - def 'card-with-id '$id '(single --matching '(= card-get $it 'id $id) $all-cards)
  - def 'compare-by-index '$list '$a '$b '(compare index-of $list $a index-of $list $b)
  - def 'pile-compare '$pileA '$pileB '(compare-by-index (list $hand $deck $discard $street $jail) $pileA $pileB)
  - def 'choose-across-piles '$prompt '$cards '$count '(run '(cancel-if! empty? $cards) '(choose --format $fmt-card-with-pile --prompt $prompt (sorted --with '(pile-compare card-pile $a card-pile $b) (sorted $cards)) $count))
  - set '$fmt-card-with-pile '(concat-to-string (list ";(" (pile-get (card-pile $it) 'name) ")"))
  - set '$fmt-card-with-cash '(concat-to-string (list (card-get $it 'name) ";(" (card-get $it 'cost) (icon-convert "$") ")"))

cards:
  # TIER 1

  - name: Constable
    tier: 0
    types: [cop]
    flavor: Do nothing.

  - name: Newsie
    tier: 0
    types: [spy]
    flavor: Gain &.
    playActions:
      - game-add! 'influence 1

  - name: Pickpocket
    tier: 0
    types: [thief]
    flavor: Gain $.
    playActions:
      - game-add! 'cash 1

  - name: Counterfeit Cash
    tier: 0
    rarity: 1
    types: [action]
    cost: 2
    flavor: Gain $$$$. Jail this card.
    playActions:
      - game-add! 'cash 4
      - pile-move-to! $jail $this

  - name: Embezzler
    tier: 0
    rarity: 1
    types: [thief, spy]
    cost: 2
    flavor: Gain $ and &.
    playActions:
      - game-add! 'cash 1
      - game-add! 'influence 1

  - name: Vintage Brooch
    tier: 0
    rarity: 1
    types: [treasure]
    cost: 2
    flavor: Draw a card.
    vp: 2
    playActions:
      - game-draw! 1

  - name: Cheese It!
    tier: 0
    rarity: 1
    types: [action]
    cost: 2
    flavor: When you get this, jail two non-Cop cards you own. Burn this card.
    initActions:
      - pile-move-to! $jail $this
      - set '$ownednoncops filter $owned '(! (card-has-type? $it 'cop))
      - pile-move-to! $jail choose-across-piles "Choose two cards to jail." $ownednoncops 2

  - name: Burglar
    tier: 0
    rarity: 0
    types: [thief]
    cost: 2
    flavor: Gain $$.
    playActions:
      - game-add! 'cash 2

  - name: Graffiti Artist
    tier: 0
    rarity: 1
    types: [trickster]
    cost: 3
    flavor: Jail a card on the Street. Replace it with a random card of the same tier.
    playActions:
      - set '$cardtoreplace (single (choose --prompt "Choose a card to jail." $street 1))
      - set '$newtier (card-get $cardtoreplace 'tier)
      - pile-move-to! $jail $cardtoreplace
      - set '$all-tier-cards (filter $card-list '(= $newtier (card-get $it 'tier)))
      # We don't want to jail a card to simply replace it with itself, that doesn't feel fun
      - set '$most-tier-cards (filter $all-tier-cards '(! (= (card-get $cardtoreplace 'name) (card-get $it 'name))))
      # Force a choose screen so that the player can see what card they got
      - "set '$random-tier-card (choose --prompt \"Your new card is:\" --required _ (take --from 'random $most-tier-cards 1) 1)"
      - pile-copy-to! $street $random-tier-card


  - name: Scrounger
    tier: 0
    rarity: 1
    types: [trickster]
    cost: 3
    flavor: Draw two cards, then discard one.
    playActions:
      - game-draw! 2
      - stop-if! empty? $hand
      - pile-move-to! $discard (choose --required _ --prompt "Choose a card to discard." $hand 1)

  - name: I Know a Guy
    tier: 0
    rarity: 2
    types: [action]
    cost: 3
    flavor: Create a Burglar (worth +2$) in your hand. Jail this after two uses.
    initActions:
      - card-set! $this 'counter 2
    playActions:
      - pile-copy-to! $hand (card-named "Burglar")
      - card-sub! $this 'counter 1
      - stop-if! gt? (card-get $this 'counter) 0
      - pile-move-to! $jail $this

  - name: Croupier
    tier: 0
    rarity: 1
    types: [thief, trickster]
    cost: 4
    flavor: Gain $$ and %.
    playActions:
      - game-add! 'cash 2
      - game-add! 'luck 1

  - name: Card Shark
    tier: 0
    rarity: 1
    types: [thief, trickster]
    cost: 4
    flavor: Draw a card. Gain $.
    playActions:
      - game-draw! 1
      - game-add! 'cash 1

  # TIER 2 (i.e. 1 when 0-indexed)

  - name: Social Climber
    tier: 1
    rarity: 1
    types: [spy]
    cost: 2
    flavor: Gain &&. Gets another +& after one use.
    playActions:
      - game-add! 'influence 2
      - stop-if! card-has-upgrade? $this 'influence
      - card-upgrade! $this 'influence

  - name: Ditch the Goods
    tier: 1
    rarity: 1
    types: [action]
    cost: 3
    flavor: Discard four cards at random, then draw that many plus one.
    playActions:
      - set '$to-discard take --from 'random $hand 4
      - set '$to-draw-count (size $to-discard)
      - pile-move-to! $discard $to-discard
      - game-draw! + 1 $to-draw-count

  - name: Lady Thistledown
    tier: 1
    rarity: 2
    types: [spy, legend]
    cost: 3
    flavor: When you get or play this, give another Spy you own +&.
    initActions:
      - card-trigger! $this
    playActions:
      - set '$all-spies filter $owned '(card-has-type? $it 'spy)
      - set '$some-spies filter $all-spies '(! (card-has-upgrade? $it 'influence))
      - set '$spies filter $some-spies '(!= $it $this)
      - stop-if! empty? $spies
      - card-upgrade! (choose-across-piles "Choose a Spy to upgrade." $spies 1) 'influence

  - name: Cat the Burglar
    tier: 1
    rarity: 2
    types: [thief, legend]
    cost: 3
    flavor: When you get or play this, give another Thief you own +$.
    initActions:
      - card-trigger! $this
    playActions:
      - set '$all-thieves filter $owned '(card-has-type? $it 'thief)
      - set '$some-thieves filter $all-thieves '(! (card-has-upgrade? $it 'cash))
      - set '$thieves filter $some-thieves '(!= $it $this)
      - stop-if! empty? $thieves
      - card-upgrade! (choose-across-piles "Choose a Thief to upgrade." $thieves 1) 'cash

  - name: Roving Gambler
    tier: 1
    rarity: 0
    types: [thief, spy, trickster]
    cost: 3
    flavor: Gain $, &, and %.
    playActions:
      - game-add! 'cash 1
      - game-add! 'influence 1
      - game-add! 'luck 1

  - name: Gold Chain
    tier: 1
    rarity: 0
    types: [treasure]
    cost: 3
    vp: 3
    flavor: When you get this, it gains * for each other Gold Chain you own.
    initActions:
      - set '$num-chains count $owned '(= card-get $it 'name "Gold Chain")
      - card-set! $this 'vp '(+ 2 $num-chains)
#only adding 2 because it counts itself


  - name: Heiress
    tier: 1
    rarity: 1
    types: [thief]
    cost: 3
    flavor: Gain $$. Gets another +$ after one use.
    playActions:
      - game-add! 'cash 2
      - stop-if! card-has-upgrade? $this 'cash
      - card-upgrade! $this 'cash

# Not an exciting card. Fair bit of friction, perhaps reduced by GUI?
#
#  - name: Embezzler
#    tier: 1
#    rarity: 1
#    types: [thief, spy]
#    cost: 3
#    flavor: "Choose one: Gain $$ or Gain &&."
#    playActions:
#      - set '$choices (map (list "Gain $$." "Gain &&.") '(icon-convert $it))
#      - set '$chosen-index (index-of $choices single choose $choices 1)
#      - if-true (= $chosen-index 0) '(game-add! 'cash 2)
#      - if-true (= $chosen-index 1) '(game-add! 'influence 2)

  - name: Smuggler
    tier: 1
    rarity: 1
    types: [trickster]
    cost: 3
    flavor: Draw three cards. Jail this card.
    playActions:
      - game-draw! 3
      - pile-move-to! $jail $this

  - name: Beat Cop
    tier: 1
    rarity: 1
    types: [cop]
    cost: 3
    flavor: When you get this, give 2 Thieves you own +$.
    initActions:
      - set '$all-thieves filter $owned '(card-has-type? $it 'thief)
      - set '$thieves filter $all-thieves '(! (card-has-upgrade? $it 'cash))
      - stop-if! empty? $thieves
      - card-upgrade! (choose-across-piles "Choose up to two Thieves to upgrade." $thieves .. 0 2) 'cash

  - name: Squealer
    tier: 1
    rarity: 1
    types: [spy, cop]
    cost: 4
    flavor: Gain &&. You may jail a card on the Street.
    playActions:
      - game-add! 'influence 2
      - pile-move-to! $jail (choose --prompt "Choose up to one card to jail." $street .. 0 1)

  - name: Grifter
    tier: 1
    rarity: 1
    types: [spy, trickster]
    cost: 4
    flavor: Gain &&&. Add a card from the shop to your deck. Jail this card.
    playActions:
      - game-add! 'influence 3
      - stop-if! empty? $shop
      - pile-move-to! --pos 'random $deck (choose --format $fmt-card-with-cash --prompt "Choose a card to add to your deck." $shop 1)
      - pile-move-to! $jail $this

  - name: Gentleman Gerald
    tier: 1
    rarity: 2
    types: [cop, legend]
    cost: 4
    flavor: When you get this, gain nine &.
    initActions:
      - game-add! 'influence 9

  - name: Big Bill Murphy
    tier: 1
    rarity: 2
    types: [cop, legend]
    cost: 4
    flavor: Gain $$. You may convert all your $ to &.
    playActions:
      - game-add! 'cash 2
      - set '$convert (ask? "Would you like to convert your $ into &?")
      - stop-if! ! $convert
      - game-add! 'influence game-get 'cash
      - game-set! 'cash 0

  - name: Mickey the Mouth
    tier: 1
    rarity: 2
    types: [trickster, legend]
    cost: 5
    flavor: Draw a card. When you get this, gain %%%%%.
    initActions:
      - game-add! 'luck 5
    playActions:
      - game-draw! 1

  - name: Swindler
    tier: 1
    rarity: 0
    types: [spy]
    cost: 5
    flavor: Draw a card. Gain &&.
    playActions:
      - game-draw! 1
      - game-add! 'influence 2

  - name: Wanted Poster
    tier: 1
    rarity: 2
    types: [action]
    cost: 5
    flavor: Gain $$$. Add a random Legend to the street. Jail this card.
    playActions:
      - game-add! 'cash 3
      - set '$all-legend-cards (filter $card-list '(card-has-type? $it 'legend))
      # Force a choose screen so that the player can see what card they got
      - "set '$random-legend (choose --prompt \"Wanted: Dead or Alive\" --required _ (take --from 'random $all-legend-cards 1) 1)"
      - pile-copy-to! $street $random-legend
      - pile-move-to! $jail $this

  - name: Double-Dealer
    tier: 1
    rarity: 1
    types: [trickster]
    cost: 6
    flavor: Draw two cards.
    playActions:
      - game-draw! 2

  - name: Hottie Mara
    tier: 1
    rarity: 2
    types: [spy, legend]
    cost: 7
    flavor: Gain 10 &.
    playActions:
      - game-add! 'influence 10


# TIER 3

  - name: Jade Ornament
    tier: 2
    rarity: 0
    types: [treasure]
    cost: 3
    flavor: This is worth * for each six cards you own.
    passiveVp: / (size $owned) 6

  - name: Polished Gem
    tier: 2
    rarity: 1
    types: [treasure]
    cost: 3
    vp: 1
    flavor: When you play this card, it gains +**.
    playActions:
     - card-add! $this 'vp 2

  - name: Crime Wave
    tier: 2
    rarity: 2
    types: [action]
    cost: 3
    flavor: Discard your hand. Create that many plus one Burglars (worth +2$) in your hand.
    playActions:
      - set '$num-burglars + 1 (size $hand)
      - pile-move-to! $discard $hand
      - set '$burglarlist map (.. 1 $num-burglars) '(card-named "Burglar")
      - pile-copy-to! $hand $burglarlist

  - name: Lucky Parole
    tier: 2
    rarity: 2
    types: [action]
    cost: 3
    flavor: Gain %%. Put a card from jail and a Constable into your hand.
    playActions:
      - game-add! 'luck 2
      - stop-if! empty? $jail
      - pile-move-to! $hand (choose --prompt "Choose a card to get out of jail." $jail 1)
      - pile-copy-to! $hand (card-named "Constable")

  - name: Opal
    tier: 2
    rarity: 0
    types: [treasure]
    cost: 4
    vp: 5
    flavor: Do nothing.

  - name: The Talented Mr. Tezuka
    tier: 2
    rarity: 2
    types: [thief, spy, legend]
    cost: 4
    flavor: Gain $$ and &&. Jail this after three uses.
    initActions:
      - card-set! $this 'counter 3
    playActions:
      - game-add! 'cash 2
      - game-add! 'influence 2
      - card-sub! $this 'counter 1
      - stop-if! gt? (card-get $this 'counter) 0
      - pile-move-to! $jail $this

  - name: Mime
    tier: 2
    rarity: 1
    types: [trickster]
    cost: 4
    flavor: When you play this, it becomes an exact copy of a card in your hand.
    playActions:
      - cancel-if! empty? $hand
      - set '$copied-card single (choose --prompt "Choose a card to copy." $hand 1)
      - set '$my-name card-get $this 'name
      - if-true (= $my-name card-get $copied-card 'name) '(run '(info "Sorry, it is strictly forbidden by the sacred Mime Code to use their powers on a fellow Mime.") '(cancel!))
      - card-remove! $this
      - pile-copy-to! $hand $copied-card

  - name: Fence
    tier: 2
    rarity: 2
    types: [trickster]
    cost: 3
    flavor: When you get or play this, shuffle the discard pile into the deck, then discard all Treasures in it.
    initActions:
      - card-trigger! $this
    playActions:
     - pile-move-to! $deck $discard
     - shuffle! $deck
     - set '$treasures-in-deck (filter $deck '(card-has-type? $it 'treasure))
     - pile-move-to! $discard $treasures-in-deck

  - name: Joey Omaha
    tier: 2
    rarity: 2
    types: [trickster, legend]
    cost: 4
    flavor: Draw a card. Give another Trickster you own +%.
    playActions:
      - game-draw! 1
      - set '$all-tricksters filter $owned '(card-has-type? $it 'trickster)
      - set '$some-tricksters filter $all-tricksters '(! (card-has-upgrade? $it 'luck))
      - set '$tricksters filter $some-tricksters '(!= $it $this)
      - stop-if! empty? $tricksters
      - card-upgrade! (choose-across-piles "Choose a Trickster to upgrade." $tricksters 1) 'luck

  - name: Ruthven Catsby, Esq.
    tier: 2
    rarity: 2
    types: [spy, legend]
    cost: 4
    flavor: Gain &&. You may convert all your & to $.
    playActions:
      - game-add! 'influence 3
      - set '$convert (ask? "Would you like to convert your & into $?")
      - stop-if! ! $convert
      - game-add! 'cash game-get 'influence
      - game-set! 'influence 0

  - name: Racketeer
    tier: 2
    rarity: 1
    types: [thief, trickster]
    cost: 4
    flavor: Gain $$. Gain %% if you own 20 or more cards.
    playActions:
      - game-add! 'cash 2
      - if-true (gte? (size $owned) 20) '(game-add! 'luck 2)

  - name: Art Forger
    tier: 2
    rarity: 2
    types: [thief, trickster]
    cost: 5
    flavor: Gain $$. You may reroll your shop with cards you own.
    playActions:
      - game-add! 'cash 2
      - stop-if! (! (ask? "Reroll your shop with cards you own?" ))
      - set '$cardnames (map $owned '(card-get $it 'name))
      - shop-reroll! '(in? $cardnames (card-get $card 'name))


  - name: Baby Teeth Nelson
    tier: 2
    rarity: 1
    types: [thief, legend]
    cost: 5
    flavor: Jail this and all Cops you own. Draw a card for each.
    playActions:
      - set '$owned-cops (filter $owned '(card-has-type? $it 'cop))
      - pile-move-to! $jail $owned-cops
      - pile-move-to! $jail $this
      - game-draw! + 1 (size $owned-cops)

  - name: High Roller
    tier: 1
    rarity: 0
    types: [trickster]
    cost: 5
    flavor: Draw a card. Gain %.
    playActions:
      - game-draw! 1
      - game-add! 'luck 1

  - name: "'Velvet Thunder' Bauer"
    tier: 2
    rarity: 2
    types: [cop, legend]
    cost: 5
    flavor: When you get this, jail all Pickpockets and Newsies.
    initActions:
      - pile-move-to! $jail filter $owned '(= card-get $it 'name "Pickpocket")
      - pile-move-to! $jail filter $owned '(= card-get $it 'name "Newsie")

  - name: Safecracker
    tier: 2
    rarity: 0
    types: [thief]
    cost: 5
    flavor: Gain $$$.
    playActions:
      - game-add! 'cash 3

  - name: The Pony Tack Bandit
    tier: 2
    rarity: 2
    types: [thief, trickster, legend]
    cost: 6
    flavor: Gain $$. You may reroll your shop with Treasures.
    playActions:
      - game-add! 'cash 2
      - stop-if! (! (ask? "Reroll your shop with Treasures?" ))
      - shop-reroll! '(card-has-type? $card 'treasure)

  - name: Turf Expansion
    tier: 2
    rarity: 1
    types: [action]
    cost: 6
    flavor: Set your hand size to 6. Burn this card.
    initActions:
     - shop-exclude! '(= card-get $card 'name "Turf Expansion")
    playActions:
     - game-set! 'hand-size 6
     - card-remove! $this

  - name: Bada Bing!
    tier: 2
    rarity: 2
    types: [action]
    cost: 8
    flavor: When you get this, jail it and gain two copies of a card you own that costs 3$ or less.
    initActions:
      - pile-move-to! $jail $this
      - set '$low-cost-owned (filter $owned '(lte? (card-get $it 'cost) 3))
      - cancel-if! empty? $low-cost-owned
      - set '$card-to-copy (choose-across-piles "Choose a card to get two copies of." $low-cost-owned 1)
      - pile-copy-to! $street $card-to-copy
      - pile-copy-to! $street $card-to-copy


# TIER 4

  - name: Patrolman's Badge
    tier: 3
    rarity: 1
    types: [treasure]
    cost: 3
    flavor: This is worth * for every Cop you own.
    passiveVp: count $owned '(card-has-type? $it 'cop)

  - name: Gilded Cage
    tier: 3
    rarity: 1
    types: [treasure]
    cost: 3
    flavor: This is worth * for each three cards in jail.
    passiveVp: / (size $jail) 3

  - name: Pawnbroker
    tier: 3
    rarity: 2
    types: [thief]
    cost: 4
    flavor: You may choose a card on the street to jail. Gain $ equal to its tier plus 2.
    playActions:
      - set '$maybe-card-to-jail (choose --prompt "Choose up to one card to jail." $street .. 0 1)
      - game-add! 'cash 2
      - stop-if! empty? $maybe-card-to-jail
      - set '$card-to-jail single $maybe-card-to-jail
      - pile-move-to! $jail $card-to-jail
      - game-add! 'cash + 1 card-get $card-to-jail 'tier

  - name: Police Trainer
    tier: 3
    rarity: 2
    types: [cop]
    cost: 4
    flavor: When you get or play this, give another Cop you own "Draw a card".
    initActions:
      - card-trigger! $this
    playActions:
      - set '$all-cops filter $owned '(card-has-type? $it 'cop)
      - set '$some-cops filter $all-cops '(! (card-has-upgrade? $it 'veteran))
      - set '$cops filter $some-cops '(!= $it $this)
      - stop-if! empty? $cops
      - card-upgrade! (choose-across-piles "Choose a Cop to upgrade." $cops 1) 'veteran

  - name: Purse Snatcher
    tier: 3
    rarity: 1
    types: [thief]
    cost: 5
    flavor: Add a card from the shop to the street and a Constable to your hand.
    playActions:
      - stop-if! empty? $shop
      - pile-move-to! $street (choose --format $fmt-card-with-cash --prompt "Choose a card to add to your discard pile." $shop 1)
      - pile-copy-to! $hand (card-named "Constable")


  - name: Dirty Sergeant
    tier: 3
    rarity: 1
    types: [cop]
    cost: 4
    flavor: Draw two cards, then discard two cards. Gain $ for every Cop you own.
    playActions:
      - game-draw! 2
      - pile-move-to! $discard (choose --required _ --prompt "Discard two cards." $hand 2)
      - game-add! 'cash count $owned '(card-has-type? $it 'cop)

  - name: Gem Cutter
    tier: 3
    rarity: 1
    types: [thief, trickster]
    cost: 5
    flavor: Gain $$. You may jail a Treasure you own. This gains its *.
    playActions:
     - game-add! 'cash 2
     - set '$treasures-to-jail (filter $owned '(card-has-type? $it 'treasure))
     - stop-if! empty? $treasures-to-jail
     - set '$maybe-card-to-jail (choose-across-piles "Choose up to one treasure to jail." $treasures-to-jail .. 0 1)
     - stop-if! empty? $maybe-card-to-jail
     - set '$card-to-jail single $maybe-card-to-jail
     - card-add! $this 'vp (card-get $card-to-jail 'vp-total)
     - pile-move-to! $jail $card-to-jail

  - name: Ruby
    tier: 3
    rarity: 0
    types: [treasure]
    cost: 6
    flavor: Do nothing.
    vp: 7

  - name: Bank Robber
    tier: 3
    rarity: 1
    types: [thief]
    cost: 6
    flavor: Gain $$$$.
    playActions:
      - game-add! 'cash 4

  - name: Corrupt Bailiff
    tier: 3
    rarity: 1
    types: [spy, cop]
    cost: 6
    flavor: Gain &&&. You may spend &&&&&& to give this card ******.
    playActions:
      - game-add! 'influence 3
      - stop-if! < game-get 'influence 6
      - set '$convert (ask?! "Would you like to spend 6& to give this card 6*?")
      - stop-if! ! $convert
      - game-add! 'influence -6
      - card-add! $this 'vp 6

  - name: Hattie the Finder
    tier: 2
    rarity: 2
    types: [trickster, legend]
    cost: 6
    flavor: Choose a card from your deck or discard pile to put into your hand.
    playActions:
      - pile-move-to! $hand (choose-across-piles "Choose a card to put into your hand." (union $deck $discard) 1)

  - name: Mr. Big
    tier: 2
    rarity: 2
    types: [thief, legend]
    cost: 6
    flavor: Gain $ for each Thief on the street.
    playActions:
      - game-add! 'cash count $street '(card-has-type? $it 'thief)

  - name: Three-Card Monte Dealer
    tier: 3
    rarity: 1
    types: [trickster]
    cost: 7
    flavor: Draw three cards, then discard one.
    playActions:
      - game-draw! 3
      - stop-if! empty? $hand
      - pile-move-to! $discard (choose --required _ --prompt "Choose a card to discard." $hand 1)

# TIER 5

  - name: The Friends We Made Along The Way
    tier: 4
    rarity: 2
    types: [treasure]
    cost: 5
    flavor: This is worth ** for every Legend you own or in jail.
    passiveVp: * 2 (size (filter (union $owned $jail) '(card-has-type? $it 'legend)))

  - name: Lucky Emerald
    tier: 4
    rarity: 1
    types: [treasure]
    cost: 5
    vp: 5
    flavor: Gain %%.
    playActions:
      - game-add! 'luck 2

  - name: Old Gaffin
    tier: 4
    rarity: 2
    types: [thief, legend]
    cost: 5
    flavor: Gain $$. Gain * whenever you play a Pickpocket or Burglar this turn.
    playActions:
      - game-add! 'cash 2
      - fx-add! --desc (icon-convert "Gain * whenever you play a Pickpocket or Burglar.") --data (card-get $this 'id) '(if-true or? (= card-get $card 'name "Pickpocket") (= card-get $card 'name "Burglar") '(card-add! card-with-id $data 'vp 1))


  - name: Annie Doshen
    tier: 4
    rarity: 2
    types: [trickster, legend]
    cost: 6
    flavor: Gain %. This is worth * for each upgraded card you own.
    passiveVp: count $owned '(card-has-any-upgrade? $it)
    playActions:
      - game-add! 'luck 1

  - name: Jailbreak
    tier: 4
    rarity: 2
    types: [action]
    cost: 6
    flavor: Put up to three cards from Jail into your hand. Burn this card.
    playActions:
      - pile-move-to! $hand (choose --prompt "Choose cards to get out of jail." $jail .. 0 3)
      - card-remove! $this

  - name: Corner the Market
    tier: 4
    rarity: 1
    types: [action]
    cost: 7
    flavor: Set your hand size to 7. Burn this card.
    initActions:
     - shop-exclude! '(= card-get $card 'name "Turf Expansion")
     - shop-exclude! '(= card-get $card 'name "Corner the Market")
    playActions:
     - game-set! 'hand-size 7
     - card-remove! $this

  - name: Kingpin
    tier: 4
    rarity: 0
    types: [thief]
    cost: 7
    flavor: Gain $$$$$.
    playActions:
      - game-add! 'cash 5

  - name: Elegant Earrings
    tier: 4
    rarity: 1
    types: [treasure]
    cost: 7
    vp: 12
    flavor: Comes as a set of two Pearl Earrings worth 6 VP each.
    initActions:
      - pile-copy-to! $discard card-named "Pearl Earring"
      - pile-copy-to! $discard card-named "Pearl Earring"
      - card-remove! $this

  - name: Pearl Earring
    tier: 4
    rarity: 1
    types: [treasure]
    cost: 0
    vp: 6
    flavor: Do nothing.

  - name: Diamond
    tier: 4
    rarity: 0
    types: [treasure]
    cost: 8
    vp: 10
    flavor: Do nothing.


  - name: Ultimate Heist
    tier: 4
    rarity: 1
    types: [action]
    cost: 10
    flavor: Draw three cards.
    playActions:
      - game-draw! 3